"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.init = exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _SourceMap = _interopRequireDefault(require("./SourceMap"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const bindings = require('node-gyp-build')(_path.default.join(__dirname, '..'));

class NodeSourceMap extends _SourceMap.default {
  constructor(projectRoot = '/') {
    super(projectRoot);
    this.sourceMapInstance = new bindings.SourceMap();
  }

  addRawMappings(map, lineOffset = 0, columnOffset = 0) {
    let {
      sourcesContent,
      sources = [],
      mappings,
      names = []
    } = map;

    if (!sourcesContent) {
      sourcesContent = sources.map(() => '');
    } else {
      sourcesContent = sourcesContent.map(content => content ? content : '');
    }

    this.sourceMapInstance.addRawMappings(mappings, sources.map(source => source ? (0, _utils.relatifyPath)(source, this.projectRoot) : ''), sourcesContent.map(content => content ? content : ''), names, lineOffset, columnOffset);
    return this;
  }

  addIndexedMappings(mappings, lineOffset = 0, columnOffset = 0) {
    let mappingBuffer = this._indexedMappingsToInt32Array(mappings, lineOffset, columnOffset);

    this.sourceMapInstance.addIndexedMappings(mappingBuffer);
    return this;
  }

  toBuffer() {
    return this.sourceMapInstance.toBuffer();
  }

  findClosestMapping(line, column) {
    let mapping = this.sourceMapInstance.findClosestMapping(line, column);

    if (mapping.generated.line === -1 || mapping.generated.column === -1) {
      return null;
    } else {
      let v = this.indexedMappingToStringMapping(mapping);
      return v;
    }
  }

  delete() {}

  static generateEmptyMap({
    projectRoot,
    sourceName,
    sourceContent,
    lineOffset = 0
  }) {
    let map = new NodeSourceMap(projectRoot);
    map.addEmptyMap(sourceName, sourceContent, lineOffset);
    return map;
  }

}

exports.default = NodeSourceMap;
const init = Promise.resolve();
exports.init = init;